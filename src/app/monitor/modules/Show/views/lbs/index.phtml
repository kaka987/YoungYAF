<!DOCTYPE html>
<html>
	<head>
	    <title>监控展示</title>
	    <meta charset=utf-8>
	    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

	    <style type="text/css">
	    	html {
	    		font-family:"Helvetica Neue",Helvetica,"Trebuchet MS",Arial,sans-serif;
	    	}
	    	body {
	    		padding:0 12%;
	    	}
	    	i,ul,ol,li,p,div,span {
	    		font-style: normal;
	    		text-decoration: none;
	    		list-style: none;
	    		padding: 0;
	    		margin: 0;
	    	}
            table {
                max-width: 100%;
                background-color: transparent;
                border-collapse: collapse;
                border-spacing: 0;
            }
            .header {
	    		text-align: center;
	    		height:80px;
	    		margin-top: 50px;
	    	}
	    	.header .title {
	    		text-align: center;
	    		font-size:24px;
	    		font-weight: bold;
	    	}
	    	.content {
	    		font-size:12px;
	    	}
	    	.content .section {
	    		margin: 20px 0;
	    	}
            .content .section .item {
                float: left;
                width: 90%;
                margin-left:20px;
            }
	    	.content .section .item > .title {
	    		font-size:16px;
	    		padding: 10px 0px;
	    	}
	    	.content .info {
	    		color:#2E75B6;
	    	}
	    	.content .bold {
	    		font-weight: bold;
	    	}
	    	.content .system {
	    		margin-top:10px;
	    		color:#000;
	    		font-size:18px;
	    		font-weight: bold;
	    	}
	    	.content .section .content {
	    		margin-bottom: 10px;
	    	}
	    	.content .focus {
	    		font-weight: bold;
	    	}
	    	.content .visit {
	    		padding:2px 0px;
	    	}
	    	.content .tip {
	    		text-align: center;
	    	}
            .content .chart {
                width: 1000px;
                height: 280px;
                text-align: center;
            }
            .content .loader {
                padding:20% 0;
            }
	    </style>

        <script type="text/javascript" src="/static/js/jquery.min.js"></script>
    </head>
	<body>
		<div class="content">

			<div class="section">
				<!--<div class="item">
                    <div class="info bold title">伦敦(lon.monitor.dy)</div>
					<div class="content">
                        <div class="chart" id="minuteChart_LON"><img class="loader" src="/static/images/ajax-loader.gif" /></div>
					</div>
				</div>-->
                <div class="item">
                    <div class="info bold title">美东(DSP.QPS)</div>
                    <div class="content">
                        <div class="chart" id="minuteChart_IAD"><img class="loader" src="/static/images/ajax-loader.gif" /></div>
                    </div>
                </div>
                <!--<div class="item">
                    <div class="info bold title">美西(nca.monitor.dy)</div>
                    <div class="content">
                        <div class="chart" id="minuteChart_NCA"><img class="loader" src="/static/images/ajax-loader.gif" /></div>
                    </div>
                </div>
                <div class="item">
                    <div class="info bold title">新加坡(sin.monitor.dy)</div>
                    <div class="content">
                        <div class="chart" id="minuteChart_SIN"><img class="loader" src="/static/images/ajax-loader.gif" /></div>
                    </div>
                </div>-->
            </div>
		</div>
        <script type="text/javascript" src="/static/js/highcharts/highcharts.js"></script>
        <script type="text/javascript">
            function merge(first, second) {
                for (var key in second) {
                    first[key] = second[key];
                }

                return first;
            }

            function clone(item) {
                if (!item) { return item; } // null, undefined values check

                var types = [ Number, String, Boolean ],
                    result;

                // normalizing primitives if someone did new String('aaa'), or new Number('444');
                //一些通过new方式建立的东东可能会类型发生变化，我们在这里要做一下正常化处理
                //比如new String('aaa'), or new Number('444')
                types.forEach(function(type) {
                    if (item instanceof type) {
                        result = type( item );
                    }
                });

                if (typeof result == "undefined") {
                    if (Object.prototype.toString.call( item ) === "[object Array]") {
                        result = [];
                        item.forEach(function(child, index, array) {
                            result[index] = clone( child );
                        });
                    } else if (typeof item == "object") {
                        // testign that this is DOM
                        //如果是dom对象，那么用自带的cloneNode处理
                        if (item.nodeType && typeof item.cloneNode == "function") {
                            var result = item.cloneNode( true );
                        } else if (!item.prototype) { // check that this is a literal
                            // it is an object literal
                            //如果是个对象迭代的话，我们可以用for in 迭代来赋值
                            result = {};
                            for (var i in item) {
                                result[i] = clone( item[i] );
                            }
                        } else {
                            // depending what you would like here,
                            // just keep the reference, or create new object
                            //这里解决的是带构造函数的情况，这里要看你想怎么复制了，深得话，去掉那个false && ，浅的话，维持原有的引用，
                            //但是我不建议你去new一个构造函数来进行深复制，具体原因下面会解释
                            if (false && item.constructor) {
                                // would not advice to do that, reason? Read below
                                //朕不建议你去new它的构造函数
                                result = new item.constructor();
                            } else {
                                result = item;
                            }
                        }
                    } else {
                        result = item;
                    }
                }

                return result;
            }

            $(function () {
                Highcharts.setOptions({
                    global: {
                        useUTC: false
                    },
                    lang: {
                        numericSymbols: null
                    },
                    credits: {
                        enabled: false
                    },
                    series: {
                        showInLegend: false
                    }
                });

                var chartOption = {
                    "chart": {
                        "width": 950,
                        "height": 380,
                        "type": "column"
                    },
                    "title": {
                        "text": null
                    },
                    "subtitle": {
                        "text": ""
                    },
                    "xAxis": {
                        "title": {
                            "text": "表"
                        }
                    },
                    "yAxis": {
                        "title": {
                            "text": "次数"
                        }
                    },
                    "plotOptions": {
                        "column": {
                            "dataLabels": {
                                "enabled": true
                            },
                            "pointWidth": 30
                        }
                    },
                    "tooltip": {
                        "valueSuffix": "次"
                    },
                    "legend": false
                };

                var minuteChart_LON = null;
                var minuteChart_IAD = null;
                var minuteChart_NCA = null;
                var minuteChart_SIN = null;

                (function () {

                    var option = clone(chartOption);

                    option.chart.renderTo = 'minuteChart_IAD';

                    var series = <?php echo $nodeData;?>

                    option['xAxis']['categories'] = [];
                    option['series'] = [{
                        'data': [],
                        'name': 'iad.monitor.dy'
                    }];

                    for (var table in series) {
                        console.log(table);
                        option['xAxis']['categories'].push(table);
                        option['series'][0]['data'].push(series[table]);
                    }

                    minuteChart_IAD = new Highcharts.Chart(option);
                })();
                /*(function () {
                    var option = clone(chartOption);

                    option.chart.renderTo = 'minuteChart_LON';

                    var json = $.ajax({
                        url: "http://162.13.3.53/reportapi/accesslog/NumberOfNode",
                        dataType: "json",
                        success: function (json) {
                            var series = json['data']['series'];

                            option['xAxis']['categories'] = [];
                            option['series'] = [{
                                'data': [],
                                'name': 'lon.monitor.dy'
                            }];

                            for (var table in series) {
                                option['xAxis']['categories'].push(table.slice(-3));
                                option['series'][0]['data'].push(series[table]);
                            }

                            minuteChart_LON = new Highcharts.Chart(option);
                        }
                    });
                })();

                (function () {
                    var option = clone(chartOption);
                    option.chart.renderTo = 'minuteChart_IAD';

                    var json = $.ajax({
                        url: "http://54.88.187.45/reportapi/accesslog/NumberOfNode",
                        dataType: "json",
                        success: function (json) {
                            var series = json['data']['series'];

                            option['xAxis']['categories'] = [];
                            option['series'] = [{
                                'data': [],
                                'name': 'iad.monitor.dy'
                            }];

                            for (var table in series) {
                                option['xAxis']['categories'].push(table.slice(-3));
                                option['series'][0]['data'].push(series[table]);
                            }

                            minuteChart_IAD = new Highcharts.Chart(option);
                        }
                    });
                })();

                (function () {
                    var option = clone(chartOption);
                    option.chart.renderTo = 'minuteChart_NCA';

                    var json = $.ajax({
                        url: "http://54.193.28.158/reportapi/accesslog/NumberOfNode",
                        dataType: "json",
                        success: function (json) {
                            var series = json['data']['series'];

                            option['xAxis']['categories'] = [];
                            option['series'] = [{
                                'data': [],
                                'name': 'nca.monitor.dy'
                            }];

                            for (var table in series) {
                                option['xAxis']['categories'].push(table.slice(-3));
                                option['series'][0]['data'].push(series[table]);
                            }

                            minuteChart_NCA = new Highcharts.Chart(option);
                        }
                    });
                })();

                (function () {
                    var option = clone(chartOption);
                    option.chart.renderTo = 'minuteChart_SIN';

                    var json = $.ajax({
                        url: "http://54.179.179.179/reportapi/accesslog/NumberOfNode",
                        dataType: "json",
                        success: function (json) {
                            var series = json['data']['series'];

                            option['xAxis']['categories'] = [];
                            option['series'] = [{
                                'data': [],
                                'name': 'sin.monitor.dy'
                            }];

                            for (var table in series) {
                                option['xAxis']['categories'].push(table.slice(-3));
                                option['series'][0]['data'].push(series[table]);
                            }

                            minuteChart_SIN = new Highcharts.Chart(option);
                        }
                    });
                })();*/

            })

        setTimeout(function(){
            location.reload();
        }, 60000);
        </script>
	</body>
</html>